import java_cup.runtime.*;

parser code {:

    public void report_error(String message, Object info)  {
        System.out.println("Warning - " + message);
    }

    public void report_fatal_error(String message, Object info)  {
        System.out.println("Error - " + message);
        System.exit(-1);
    }
:}

terminal			SE, ENTAO, SENAO, FIM, REPITA, FLUTUANTE, RETORNA, ATE;
terminal			LEIA, ESCREVA, ATRIBUICAO, DOISPONTOS, MAIORQ, MENORQ;
terminal 			EPARENTESES, DPARENTESES, MULTIPLICACAO, IGUAL, SUBTRACAO;
terminal 			ADICAO, DIVISAO, MENORIGUALQ, MAIORIGUALQ, INTEIRO;
terminal 			ECOLCHETES, DCOLCHETES, ID, VIRGULA, DIFERENTE, NUMERO;
terminal Integer	NUMERO_INTEIRO, NUMERO_FLUTUANTE, NUMERO_NCIENTIFICA;

non terminal		programa, lista_declaracoes, declaracao, declaracao_variaveis;
non terminal		atribuicao, declaracao_funcao, tipo, lista_variaveis, var, dimensao;
non terminal		expressao_aditiva, assinatura, lista_parametros, corpo, parametro;
non terminal		acao, expressao, se, repita, leia, escreva, retorna, erro;
non terminal		expressao_simples, operador_relacional, expressao_multiplicativa;
non terminal 		operador_soma, expressao_unaria, operador_multiplicacao, fator;
non terminal		numero, chamada_funcao, lista_argumentos;

precedence left ADICAO, SUBTRACAO;
precedence left MULTIPLICACAO, DIVISAO;
precedence left EPARENTESES, DPARENTESES;

programa ::= lista_declaracoes 											{: System.out.println("Opa"); :}
;

lista_declaracoes ::= lista_declaracoes declaracao						{: System.out.println("Opa"); :}
	| declaracao														{: :}
;

declaracao ::= declaracao_variaveis 									{: :}
	| atribuicao														{: :}
	| declaracao_funcao													{: :}
;

declaracao_variaveis ::= tipo DOISPONTOS lista_variaveis 				{: :}
;

lista_variaveis ::= lista_variaveis VIRGULA var							{: :}
	| var																{: :}
;

var ::= ID		 														{: :}
	| ID dimensao														{: :}
;

dimensao ::= dimensao ECOLCHETES expressao_aditiva DCOLCHETES			{: :}
	| ECOLCHETES expressao_aditiva DCOLCHETES							{: :}
;

tipo ::= INTEIRO														{: :}
	| FLUTUANTE															{: :}
;

declaracao_funcao ::= tipo assinatura 									{: :}
	| assinatura														{: :}
;

assinatura ::= ID EPARENTESES lista_parametros DPARENTESES corpo FIM 	{: :}
;

lista_parametros ::= lista_parametros VIRGULA parametro					{: :}
	| parametro															{: :}
	|																	{: :}
;

parametro ::= tipo DOISPONTOS ID 										{: :}
	| parametro ECOLCHETES	DCOLCHETES									{: :}
;

corpo ::= corpo acao													{: :}
	| 																	{: :}
;

acao ::= expressao														{: :}
	| declaracao_variaveis												{: :}
	| se																{: :}
	| repita															{: :}
	| leia																{: :}
	| escreva															{: :}
	| retorna															{: :}
	| erro																{: :}
;

se ::= SE expressao_simples operador_relacional expressao_aditiva ENTAO corpo FIM {: :}
	| SE expressao_simples operador_relacional expressao_aditiva ENTAO corpo SENAO corpo FIM {: :}
;

repita ::= REPITA corpo ATE expressao_simples operador_relacional expressao_aditiva {: :}
;

atribuicao ::= var ATRIBUICAO expressao									{: :}
;

leia ::= LEIA EPARENTESES ID DPARENTESES								{: :}
;

escreva ::= ESCREVA EPARENTESES expressao DPARENTESES					{: :}
;

retorna ::= RETORNA EPARENTESES expressao DPARENTESES					{: :}
;

expressao ::= expressao_simples											{: :}
	| atribuicao														{: :}
;

expressao_simples ::= expressao_simples operador_relacional expressao_aditiva {: :}
	| expressao_aditiva													{: :}
;

expressao_aditiva ::= expressao_aditiva operador_soma expressao_multiplicativa {: :}
	| expressao_multiplicativa											{: :}
;

expressao_multiplicativa ::= expressao_multiplicativa operador_multiplicacao expressao_unaria {: :}
	| expressao_unaria													{: :}
;

expressao_unaria ::= operador_soma fator								{: :}
	| fator																{: :}
;

operador_relacional ::= MENORQ 
	| MAIORQ															{: :}
	| IGUAL																{: :}
	| DIFERENTE															{: :}
	| MENORIGUALQ														{: :}
	| MAIORIGUALQ 														{: :}
;

operador_soma ::= ADICAO 												{: :}
	| SUBTRACAO															{: :}
;

operador_multiplicacao ::= MULTIPLICACAO 								{: :}
	| DIVISAO															{: :}
;

fator ::= EPARENTESES expressao DPARENTESES								{: :}
	| var																{: :}
	| chamada_funcao													{: :}
	| numero															{: :}
;

numero ::= NUMERO_INTEIRO 												{: :}
	| NUMERO_FLUTUANTE 													{: :}
	| NUMERO_NCIENTIFICA												{: :}
;

chamada_funcao ::= ID EPARENTESES lista_argumentos DPARENTESES			{: :}
;

lista_argumentos ::= lista_argumentos VIRGULA expressao					{: :}
	| expressao															{: :}
	| 		 															{: :}
;

	
/*
 * Notas sobre o parser:
 * 1. Declaracao_parentes parece ser dispensavel, porque ele chama lista_parametros e vazio, e lista_parametros chama vazio;
 * 2. O que é essa segunda declaracao de funcao com FECHAPARENTESES FIM. Declara uma funcao sem corpo? Só a assinatura?;
 * 3. Parece que há redundancia em declaracao_composta que tem uma lista_statements e isso que são
 * declaracoes_locais pra chamar declaracao_variaveis. Vou excluir declaracao_composta e onde ele for
 * chamado, substituirei por lista_statement, exceto em statement, com isso excluo declaracoes_locais tambem
 * e adiciono declaracao_variaveis à  statement;
 * 4. Do jeito que está, não é possível fazer declarações de variáveis dentro de estruturas condicionais;
 * 
 */